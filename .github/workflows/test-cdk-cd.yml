name: Test tiles generation CDK and ECS task run

on:
  workflow_run:
    workflows: ["Receive PR Test Approve"]
    types:
      - completed

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr_number"
            })[0];
            const download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            const fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_number.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        run: unzip pr_number.zip
      - name: 'Comment on PR'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issue_number = Number(fs.readFileSync('./pr_number'));
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: 'Test tiles generation: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });
  
  build:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      
      - name: Use Node.js
        uses: actions/setup-node@v3.0.0
        with:
          node-version: '16.x'
      
      - name: Install cdk-cli & cdk-lib
        run: |
          npm install -g aws-cdk 
          cd tiles-generation/cdk
          npm install aws-cdk-lib

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Test Raster Tile CDK
        run: |
          cd tiles-generation/cdk
          cdk deploy \
          TestRasterTileGeneration \
          SlackSNSTestRasterTileGeneration \
          EmailSNSTestRasterTileGeneration \
          --context BUCKET=${{secrets.TILE_S3_BUCKET}} \
          --context EMAIL=${{secrets.EMAIL}} \
          --context SLACK=${{secrets.SLACK}} \
          --require-approval never \
          --outputs-file ./cdk-outputs-raster.json

      - name: Run Test Raster Tiles ECS task
        run: |
          ClusterName=`jq -r '.TestRasterTileGeneration .ClusterName' tiles-generation/cdk/cdk-outputs-raster.json`
          CapacityProviderName=`jq -r '.TestRasterTileGeneration .CapacityProviderName' tiles-generation/cdk/cdk-outputs-raster.json`
          TaskDefinitionArn=`jq -r '.TestRasterTileGeneration .TaskDefinitionArn' tiles-generation/cdk/cdk-outputs-raster.json`
          aws ecs run-task --cluster $ClusterName --task-definition $TaskDefinitionArn --capacity-provider-strategy capacityProvider=$CapacityProviderName

      - name: Deploy Test Vector Tile CDK
        run: |
          cd tiles-generation/cdk
          cdk deploy \
          TestVectorTileGeneration \
          SlackSNSTestVectorTileGeneration \
          EmailSNSTestVectorTileGeneration \
          --context BUCKET=${{secrets.TILE_S3_BUCKET}} \
          --context EMAIL=${{secrets.EMAIL}} \
          --context SLACK=${{secrets.SLACK}} \
          --require-approval never \
          --outputs-file ./cdk-outputs-vector.json

      - name: Run Test Vector Tiles ECS task
        run: |
          ClusterName=`jq -r '.TestVectorTileGeneration .ClusterName' tiles-generation/cdk/cdk-outputs-vector.json`
          CapacityProviderName=`jq -r '.TestVectorTileGeneration .CapacityProviderName' tiles-generation/cdk/cdk-outputs-vector.json`
          TaskDefinitionArn=`jq -r '.TestVectorTileGeneration .TaskDefinitionArn' tiles-generation/cdk/cdk-outputs-vector.json`
          aws ecs run-task --cluster $ClusterName --task-definition $TaskDefinitionArn --capacity-provider-strategy capacityProvider=$CapacityProviderName
